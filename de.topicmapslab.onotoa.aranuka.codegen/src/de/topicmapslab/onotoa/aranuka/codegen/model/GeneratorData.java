/*******************************************************************************
 * Copyright (c) 2008, 2009 Topic Maps Lab and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Hannes Niederhausen - initial API and implementation
 *******************************************************************************/
package de.topicmapslab.onotoa.aranuka.codegen.model;

import static de.topicmapslab.onotoa.aranuka.codegen.model.IAnnotationKeys.AUTO_GENERATE;
import static de.topicmapslab.onotoa.aranuka.codegen.model.IAnnotationKeys.CATEGORY;
import static de.topicmapslab.onotoa.aranuka.codegen.model.IAnnotationKeys.CREATE_NEW;
import static de.topicmapslab.onotoa.aranuka.codegen.model.IAnnotationKeys.HIDDEN;
import static de.topicmapslab.onotoa.aranuka.codegen.model.IAnnotationKeys.NAME;

import java.util.ArrayList;

import de.topicmapslab.kuria.annotation.widgets.Check;
import de.topicmapslab.kuria.annotation.widgets.Editable;
import de.topicmapslab.kuria.annotation.widgets.Hidden;
import de.topicmapslab.kuria.annotation.widgets.TextField;
import de.topicmapslab.tmcledit.model.Annotation;
import de.topicmapslab.tmcledit.model.TMCLConstruct;
import de.topicmapslab.tmcledit.model.views.extension.IModelExtension;

/**
 * @author Hannes Niederhausen
 * 
 */
@Editable
public class GeneratorData implements IModelExtension {

	@Hidden
	private TMCLConstruct parent;

	public GeneratorData() {
	}

	/**
	 * @param parent the construct which annotations will be edited
	 */
	public GeneratorData(TMCLConstruct parent) {
		super();
		this.parent = parent;
	}

	@TextField(label = "Category")
	public String getCategory() {
		return getValueOf(CATEGORY);
	}

	@TextField(label = "Field Name")
	public String getName() {
		return getValueOf(NAME);
	}

	@Check
	public boolean isHidden() {
		String val = getValueOf(HIDDEN);
		if (val != null)
			return Boolean.parseBoolean(val);

		return false;
	}

	@Check
	public boolean isAutoGenerated() {
		String val = getValueOf(AUTO_GENERATE);
		if (val != null)
			return Boolean.parseBoolean(val);

		return false;
	}

	@Check
	public boolean isCreateNew() {
		String val = getValueOf(CREATE_NEW);
		if (val != null)
			return Boolean.parseBoolean(val);

		return false;
	}

	private String getValueOf(String annotationKey) {

		for (Annotation a : parent.getAnnotations()) {
			if (a.getKey().equals(annotationKey))
				return a.getValue();
		}
		return null;
	}

	private java.util.List<Annotation> getAnnotationOf(String annotationKey) {
		java.util.List<Annotation> result = new ArrayList<Annotation>();

		for (Annotation a : parent.getAnnotations()) {
			if (a.getKey().equals(annotationKey))
				result.add(a);
		}

		return result;
	}
}
