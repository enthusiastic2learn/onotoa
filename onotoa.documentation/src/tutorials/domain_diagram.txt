///////////////////////////////////////////////////////////////////////////////////////////
new section: 2.3 Domain Diagram
///////////////////////////////////////////////////////////////////////////////////////////

=== Domain Diagram ===

The domain diagram has only one property:

* *Name*: The name is an unique identifier in a schema, which means you can not create two diagrams with the same name.

You can edit the name by modifying the value in the text field of the property page. If you enter a name which is already 
used, a red icon will appear on the left hand side, and the name will not be changed, when the focus is lost.

.Property Page of Domain Diagram
[[domain_diagram_name]]
image::images/domain_diagram_name.png[scaledwidth="100%"]

///////////////////////////////////////////////////////////////////////////////////////////
edit section 3.1 Managing Diagrams
///////////////////////////////////////////////////////////////////////////////////////////

=== Managing diagrams ===

The node 'Diagrams' is the parent of all nodes representing diagrams. 

To create a new diagram, use the context menu of the 'Diagrams' node. It contains two entries,  *Create New Diagram...* and *Create New Domain Diagram...*. Choose the entries, 
by clicking with the left mouse button on it and a dialogue appears and asks for the name of the new diagram.
If you want to abort, just press the *Cancel* button. 

Every diagram must have a different name, so if you enter a name, which is already used, it is 
not possible to press *OK*. After pressing *OK* a new diagram is created and an editor is automatically opened. You can also recognize, that the 
node 'Diagrams' got a new child node labelled with the name of the diagram.

.Context menu of 'Diagrams' in the *Model View*
[caption="Figure:"]
image::images/create_diagram_ctx_1.png[scaledwidth="60%"]

The context menu of a diagram node has two entries:

* *Rename...* Opens a dialogue to rename the diagram.
* *Delete* Deletes the diagram and it's content. 

NOTE: The deletion of the diagram does not delete the schema elements, which are represented in the diagram.

To reopen a closed *Diagram Editor* just double click on the node representing the diagram.

///////////////////////////////////////////////////////////////////////////////////////////
unknown section x.x Difference between Diagram and Domain Diagram
///////////////////////////////////////////////////////////////////////////////////////////

=== Difference between Diagram and Domain Diagram ===

The normal *Diagram* should be the editors first choice to create and modify a Topic Maps Schema. It displays detailed informations 
about the schema and represents an exact graphical representation. 

The *Domain Diagram* presents the informations in a more simple way without the loss of important informations. Because of this it is predestined 
for demonstrative issues. The diagram is reduced to the main aspects of a schema and does not seems to be overcharged. Schemas could be created in 
fast and easy way. According to this, the following informations do not appear in the diagram:

* Cardinalities
* Scope constraints
* Reifier constraints  
* Data types

Look at the images below to see the differences.

.Diagram
[[ex_diagram_view]]
image::images/example_diagram_view.png[scaledwidth="100%"]

.Domain Diagram
[[ex_domain_diagram_view]]
image::images/example_domain_diagram_view.png[scaledwidth="100%"]

The *Palette* of the *Domain Diagram* also differs from the *Diagrams* one. Some constraints, types and the *Is A...* relation 
are absent to simplify the menu. But there is no loss of complexity. All missing properties are still available and modifiable 
in the *Property Detail View* below the diagram or the context menu.

.Domain Diagram Palette
[[domain_diagram_palette]]
image::images/domain_diagram_palette.png[scaledwidth="100%"]

An additional feature of the *Domain Diagram* is the insertion of an image for each Topic Type to increase the visual accessibility. 
Click on the *Add image...* entry in the context menu of a Topic Type, choose one from the file system and affirm your choice to 
add an image. The entries of the context menu change after the adding of an image. Instead of the add function the following ones will 
appear:

* *Change Image...* Opens a dialogue to select a new image.
* *Remove Image...* Deletes the image.  

.Context Menu
[[context_menu_image]]
image::images/context_menu_image.png[scaledwidth="50%"]

 
 
