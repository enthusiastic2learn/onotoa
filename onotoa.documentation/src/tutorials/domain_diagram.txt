///////////////////////////////////////////////////////////////////////////////////////////
new section: 2.3 Domain Diagram
///////////////////////////////////////////////////////////////////////////////////////////

=== Domain Diagram ===

The domain diagram has only one property:

* *Name*: The name is an unique identifier in a schema, which means you can not create two diagrams with the same name.

You can edit the name by modifying the value in the text field of the property page. If you enter a name which is already 
used, a red icon will appear on the left hand side, and the name will not be changed, when the focus is lost.

.Property Page of Domain Diagram
[[domain_diagram_name]]
image::images/domain_diagram_name.png[scaledwidth="100%"]










///////////////////////////////////////////////////////////////////////////////////////////
edit section 3.1 Managing Diagrams
///////////////////////////////////////////////////////////////////////////////////////////

=== Managing diagrams ===

The node 'Diagrams' is the parent of all nodes representing diagrams. 

To create a new diagram, use the context menu of the 'Diagrams' node. It contains two entries,  *Create New Diagram...* and *Create New Domain Diagram...*. Choose the entries, 
by clicking with the left mouse button on it and a dialogue appears and asks for the name of the new diagram.
If you want to abort, just press the *Cancel* button. 

Every diagram must have a different name, so if you enter a name, which is already used, it is 
not possible to press *OK*. After pressing *OK* a new diagram is created and an editor is automatically opened. You can also recognize, that the 
node 'Diagrams' got a new child node labelled with the name of the diagram.

.Context menu of 'Diagrams' in the *Model View*
[caption="Figure:"]
image::images/create_diagram_ctx_1.png[scaledwidth="60%"]

The context menu of a diagram node has two entries:

* *Rename...* Opens a dialogue to rename the diagram.
* *Delete* Deletes the diagram and it's content. 

NOTE: The deletion of the diagram does not delete the schema elements, which are represented in the diagram.

To reopen a closed *Diagram Editor* just double click on the node representing the diagram.










///////////////////////////////////////////////////////////////////////////////////////////
unknown section x.x Difference between Diagram and Domain Diagram
///////////////////////////////////////////////////////////////////////////////////////////

=== Differences between Diagram and Domain Diagram ===

The normal *Diagram* should be the editors first choice to create and modify a Topic Maps Schema. It displays detailed informations 
about the schema and represents an exact graphical representation. 

The *Domain Diagram* presents the informations in a more simple way without the loss of important informations. Because of this it is predestined 
for demonstrative issues. The diagram is reduced to the main aspects of a schema and does not seems to be overcharged. Schemas could be created in 
fast and easy way. According to this, the following informations do not appear in the diagram:

* Cardinalities
* Scope constraints
* Reifier constraints  
* Data types

Look at the images below to see the differences.

.Standart diagram
[[ex_diagram_view]]
image::images/example_diagram_view.png[scaledwidth="100%"]

.Domain Diagram
[[ex_domain_diagram_view]]
image::images/example_domain_diagram_view.png[scaledwidth="100%"]

The *Palette* of the *Domain Diagram* also differs from the *Diagrams* one. Some constraints, types and the *Is A...* relation 
are absent to simplify the menu. But there is no loss of complexity. All missing properties are still available and modifiable 
in the *Property Detail View* below the diagram but this is not the recommended way to use the Domain Diagram. 

.Domain Diagram Palette
[[domain_diagram_palette]]
image::images/domain_diagram_palette.png[scaledwidth="100%"]

In contrast to the normal diagram, two additional operations are directly available by the use of the context menu:

* Add and remove picture (see below)
* Set and create new roles for an association

The *Domain Diagram* provides the insertion of an image for each Topic Type to increase the visual accessibility. 
Click on the *Add image...* entry in the context menu of a Topic Type, choose one from the file system and affirm your choice to 
add an image. The entries of the context menu change after the adding of an image. Instead of the add function the following ones will 
appear:

* *Change Image...* Opens a dialogue to select a new image.
* *Remove Image...* Deletes the image.  

.Context Menu
[[context_menu_image]]
image::images/context_menu_image.png[scaledwidth="50%"]

 
 

 
 
 
 
 
///////////////////////////////////////////////////////////////////////////////////////////
unknown section x.x Interaction between Diagram and Domain Diagram
///////////////////////////////////////////////////////////////////////////////////////////

=== Interaction between Diagram and Domain Diagram ===

Every new created diagram is reachable by its respective named tab at the top of the main editor window. 

_Onotoa_ provides the exchange of elements between the Domain Diagram and the normal diagram. There are two different methods to perform this exchange 
as you can see in the context menu of every Topic type:

.Move and Copy
[[move_copy_context]]
image::images/move_copy_context.png[scaledwidth="50%"]

* *Move To...* Move selected elements to the destiny diagram and remove them from the actual one.
* *Copy To ...* Copy selected elements to the destiny diagram without removing them from the actual one.  

The user could choose the amount of elements he would move or copy. It is possible to copy or move single topics as well as selections or the whole 
schema. Use the *Marquee* feature or click on each element while holding the *Ctrl* key pressed to make a selection.   










///////////////////////////////////////////////////////////////////////////////////////////
section 4.1 The Palette from the Domain Diagram
///////////////////////////////////////////////////////////////////////////////////////////

=== Palette ===

The palette will create a diagram element and a new schema element which it 
represents. If you select a diagram element the properties of the 
represented schema element will be shown in the *Property Details View*.

The palette can be seen in <<domain_palette_elements>>.
 

.Palette of a Domain Diagram editor
[[domain_palette_elements]]
image::images/domain_diagram_palette.png[ scaledwidth="35%",align="center"]

The elements of the palette are:

* *Select:* Tool for selecting a diagram element. The selected element can be 
moved, if it supports this operation.

* *Marquee:* Selection tool for multiple diagram elements. You can select a 
group of elements. This can be useful if you want remove or delete more than 
one element.

* *Comment:* Creates a comment in the diagram. This comment is represented like 
a post-it note. This comment does not exist as schema element. If you want to 
export
your a comment to TMCL use the documentation properties.  

* *Topic:* Creates a topic type representation and adds it to the diagram. 
The represented topic is also created and added to the schema. 
It will be placed where it was dropped.

* *Name:* Creates a name constraint representation. You need to drop 
the new constraint on a topic type representation. The according name type is also 
created and added to the schema. A new schema element will be created too.

* *Occurrence:* Creates an occurrence constraint representation. You 
need to drop the new constraint on a topic type representation. The according 
occurrence type is also created and added to the schema. A new schema element will 
be created too. 

* *Kind Of...:* Creates a connection between two topic types, which represents 
a kind of relationship.

* *Association:* Creates an element representing an association 
constraint in the diagram. This is used as connection point between topic types 
which are in an relationship. The according association type is also created and 
added to the schema.

* *Player:* The connection between a topic type (the player) and 
an association constraint (the association).

To create a new 'Topic Type' just drag the *Topic* palette entry into the 
diagram. A new 'Topic Type' with a default name will be created. 
To add  another 'Topic Type' simply repeat this process. 

To add a 'Name Constraint' to the 'Topic Type', just drag *Name* onto the 'Topic Type' and a new 'Name Constraint' with 
default properties will be added to the 'Topic Type'. The other Occurrence Constraint works similarly. 

To create an 'Is a' or 'Kind of' relationship, click on the tool entry in the palette. Then click on a topic type representation 
and after that one another one. In an 'Is a' relationship, the first 'Topic Type' will be the instance and the second one the type. 

To add a 'Association' just drag the *Association* palette entry into the diagram. A new Association Constraint with a default 
name will be created and the specific Association Type too.  

To add a 'Topic Role Constraint' just click on the *Player* palette entry. Then click (order does not matter) on the 
association representation and the topic representation. 

The editing state will remain in the relationship creation mode, so you don't have to go through the palette menu again for creating 
another relationship. To go back to selection mode press the right mouse button or 'Select' in the palette.










///////////////////////////////////////////////////////////////////////////////////////////
section 4.2 Graphical Representation -> new icons in the Domain diagram
suggestion: add both tables in the section, name them specific and do not touch the text
///////////////////////////////////////////////////////////////////////////////////////////

[width="53%", cols="^10%,<90%"]
|======================================================================
ifdef::basebackend-docbook[]
|image:images/types/domain_nametype.gif[width="0.3cm"]|Name Type
|image:images/types/domain_occurrencetype.gif[width="0.3cm"]|Occurrence Type
endif::basebackend-docbook[]
ifndef::basebackend-docbook[]
|image:images/types/domain_nametype.gif[width="1cm"]|Name Type
|image:images/types/domain_occurrencetype.gif[width="1cm"]|Occurrence Type
endif::basebackend-docbook[]
|======================================================================










///////////////////////////////////////////////////////////////////////////////////////////
glossary update  
///////////////////////////////////////////////////////////////////////////////////////////

Glossary
========
[glossary]

Domain Diagram::
	A Domain Diagram is a specific view of the Topic Maps schema. It consists of graphical representation of schema elements
	and connects them if they have a relationship, e.g. the "Kind of" relationship, but in a more simple way than the normal diagram. 
	Some informations, e.g. cardinalities, aren´t displayed in this diagram type. 
	
Palette::
	The palette provides the functionality of the editor. It contains a set of tools to create new elements.
		
Property Details View::
	The Property Details View contains a property page for every element of an schema and provides the opportunity to change all 
	properties.











///////////////////////////////////////////////////////////////////////////////////////////
section 2 The Property Details View
update note #1
///////////////////////////////////////////////////////////////////////////////////////////	

NOTE: The property pages support undo and redo functions for model changes. To manage a lot of changes during entering the text, 
_Onotoa_ processes the changes after the text field loses its focus or the enter key was pressed.









///////////////////////////////////////////////////////////////////////////////////////////
section x.x Export an schema
///////////////////////////////////////////////////////////////////////////////////////////	

=== Export an schema ===

_Onotoa_ supports the export of an schema. 
