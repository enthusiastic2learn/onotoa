== Create a PSIProvider ==

In this chapter we will create a plug-in called MyPSIProvider, which will return three PSI proposals:

* http://psi.example.org/topic
* http://psi.ontopedia.org/topic
* http://psi.topicmapslab.de/topic

"topic" is the name of the topic. We presume the name is without a whitespace.

First we create a new plug-in project with the new wizard. Name it "de.topicmapslab.onotoa.MyPSIProvider"

Fill out the second page like in <<new_proj_psi>>.

.Page 2 of the new project wizard
[[new_proj_psi]]
image::images/extensions/new_project_psi2.png[scaledwidth="80%"]

In the third page deactivate the check box. With that no template us used.

Press finish and a dialog asks to switch to the Plug-in Development perspective, press yes.  

Automatically the editor for the plugin.xml is opened, which is the configuration file of the plug-in.
Click on the *Dependencies* tab and add *de.topicmapslab.tmcledit.edit* to *Required Plug-ins*. If you can't find
the plug-in check your target platform.

After that switch to the *Extensions* tab. Press *Add...* and choose *de.topicmapslab.edit.psiprovider*. Now we
have to add a provider to these extension point. The provider is added via context menu of the extension point: *New->psiprovider*.

Select the new created extension and you will see the property of the extension point on the right. The properties are:

* *id* The id is used to identify the PSIProvider. Use a name which is unlikely used in other plug-ins. Usually you use the id of your plug-in
and add a name, like the editor already did after creating it. We use the id:  de.topicmapslab.onotoa.MyPSIProvider.ExampleProvider

* *name* The name is used as label for the preference page where you can activate or deactivate the PSIprovider. Name it 
"Example Provider".

* *class* The class attribute is the qualified name of the class, which implements the IPSIProvider interface. If we would have already 
created a class, we could search it by pressing *Browse...*. Instead we enter the name "de.topicmapslab.onotoa.mypsiprovider.ExampleProvider" and
click on the label *class*. A new class wizard is opened. Using the qualified name we entered in the text field. The super class of the class is
the PSIProvider, which is an abstract implementation of the needed interface.

As you can see we need to implement one method: 'getSubjectIdentifier()'. Enter the following implementation:

----
String name = getName().toLowerCase();
 
Set<PSIProviderResult> results = 
 	new HashSet<PSIProviderResult>(3);

results.add(new PSIProviderResult(
	"http://psi.example.org/"+name, 
	"A tiny description"));
	
results.add(new PSIProviderResult(
	"http://psi.ontopedia.org/"+name, 
	"A tiny description"));
	
results.add(new PSIProviderResult(
	"http://psi.topicmapslab.de/"+name, 
	"A tiny description"));
	
return results;
----

In the first line we get the name of the topic. _Onotoa_ sets the name when asking for proposals. The next line creates a Set, which will hold
the results. In the next line we create the results. Every PSIProviderResults has two attributes. The identifier and a description. We create the 
identifier on the fly and add a default description.

A PSIProvider has another method: 'getSubjectIdentifierStartingWith(String prefix)'.

The prefix parameter contains the text, which was already entered. The implementation in the abstract class PSIProvider
calls 'getSubjectIdentifier()' and removes all PSIProviderResults which do not have identifier starting with the text in 'prefix'.
It would be more efficient to not create these results in the first thing, so it is advised to override this method and implement it
more efficiently. 

That's it. You just created your first PSIProvider. How you can deploy the provider is described in <<_deploy_the_new_plug_ins>>.
