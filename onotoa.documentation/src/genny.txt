== Generating an Instance Editor ==

With the Generic Editor SDK and Maven3 it is possible to create an editor based on a topic map schema.

The generated editor uses _Aranuka_ for mapping the java instances to topics therefore there are some restrictions for
the schema:

 * Scope contraints aren't supported
 * Reifier constraints aren't supported
 * Only one "kind of.." association per topic type allowed
 * Every type must have at least one subject identifier

In addition to the TMCL constructs the code generator needs some annotation which are explained in the following sections.
For most of the constructs a new node will be shown in the *ModelView* which can be disabled in the preferences.
Selecting one of the node labeled "Code Generation Data" a page is shown in the *PropertyDetailsPage*.
In contrast to the  constructs property details page, the annotation pages need to apply the values by pressing the apply button in every page. 
Without pressing "apply" the changes are lost! 

NOTE: It is possible to add the annotations in the constructs annotation table instead of using the input mask.

The sections are titled with the annotated constructs.

=== Topic Map Schema ===

The code generator page for the topic map schema has only one text field: "Default Category".
Its value is used to label the editors *ModelView* tab for every topic type. If no value is given the tab
is labeled "Model".

.Used annotations for topic maps schema
[options="header"]
|=========================================
|Key|Description
|de.topicmapslab.genny.category|Default category name
|======================= 

=== Topic Type ===

For every topic type another category can be set. For each category a new tab is added to the *ModelView* of the editor.
In addition the name of the generated can be set. This might be useful if the name of the topic type is not useable as
class name or its in another language than the wanted code.

The annotation keys used are:

.Used annotations for topic types
[options="header"]
|=========================================
|Key|Description
|de.topicmapslab.aranuka.name|Class name
|de.topicmapslab.genny.category|Category name
|=========================================

=== Identifier Constraints ===

Every identifier constraint of a topic type will be represented as field in the generated class. 

The nodes in the _ModelView_ have a generator child node which provides an input mask.
The widgets shown represent the following annotations:

.Used annotations for identifier constraints
[options="header"]
|=========================================
|Key|Description
|de.topicmapslab.aranuka.name|name of the field of the generated class 
|de.topicmapslab.aranuka.generateattribute|generate a field
|de.topicmapslab.kuria.hidden|indicates that there should be no widget for the generated field; its hidden in the input mask
|de.topicmapslab.kuria.read-only|generates a widget but it is only read-only
|de.topicmapslab.kuria.label|Every widget has a label which shows the name of the field in the class. This can be overridden.
|de.topicmapslab.kuria.typelabel|Instead of using toString the field will be used as string representation of the instance
|de.topicmapslab.aranuka.autogenerate|identifier will be auto generated when the instance will be persisted into the topic map.
|de.topicmapslab.kuria.weight|A weight used to sort the widgets of the input mask
|=========================================

WARNING: _Aranuka_ allows only one field for each identifier type. This includes contraints inherited from super types.

=== Name and Occurrence Constraints ===

Every name and occurrence constraint of a topic type will be represented as field in the generated class. 

The nodes in the _ModelView_ have a generator child node which provides an input mask.
The widgets shown represent the following annotations:

.Used annotations for identifier constraints
[options="header"]
|=========================================
|Key|Description
|de.topicmapslab.aranuka.name|name of the field of the generated class 
|de.topicmapslab.aranuka.generateattribute|generate a field
|de.topicmapslab.kuria.hidden|indicates that there should be no widget for the generated field; its hidden in the input mask
|de.topicmapslab.kuria.read-only|generates a widget but it is only read-only
|de.topicmapslab.kuria.label|Every widget has a label which shows the name of the field in the class. This can be overridden.
|de.topicmapslab.kuria.typelabel|Instead of using toString the field will be used as string representation of the instance
|de.topicmapslab.kuria.createnew|used to create a new instance before adding it to the list - only used for lists or sets 
|de.topicmapslab.kuria.weight|A weight used to sort the widgets of the input mask
|=========================================

WARNING: It is not allowed to have names or occurrences with the same type. This also valid for super types. This means if you specify a name
contraint with type x in a super type there must be no subtype with a constraint using x. 

=== Associations ===

Associations have no special property pages for annotations yet. So the annotations need to be added directly into the annotation table.
Associations also are represented by fields in the class. The type will be the class for the other players.

Mostly it is not wanted that every player has a field with the counter player. For instance an person should have the attribute where she 
lives which is of type address. On the contrary the address instance should not have a set of persons. To hide the field the annotation
"de.topicmapslab.aranuka.generateattribute" is set to false. The construct annotated with this annotation will be the which will not be a
field. In the example it is necessary to select the topic role constraint connecting the association constraint with the topic type person.

The code generator sets the name of the field in binary associations to the name of the type. If the card-max is more than 1 the field is
named "typeNameSet". To prevent that this name is used as label the "de.topicmapslab.kuria.label" annotation  is used.

Other annotations createnew and so on are listed below and are used like in other fields.

.Used annotations for topic role constraints
[options="header"]
|=========================================
|Key|Description
|de.topicmapslab.aranuka.generateattribute|generate a field
|de.topicmapslab.kuria.hidden|indicates that there should be no widget for the generated field; its hidden in the input mask
|de.topicmapslab.kuria.read-only|generates a widget but it is only read-only
|de.topicmapslab.kuria.label|Every widget has a label which shows the name of the field in the class. This can be overridden.
|de.topicmapslab.kuria.createnew|used to create a new instance before adding it to the list - only used for lists or sets 
|de.topicmapslab.kuria.weight|A weight used to sort the widgets of the input mask
|=========================================

=== General Information ===

Every constraint has a cardinality which will be used for the code generation. If the card-min is zero, the field will be marked as 
optional, which means the input mask does not demand this values.

If card-max is greater then 1 a set of the type is created. Especially for primitive data types it is necessary to set the create new flag to true.

=== Generate the Editor ===

After annotating the schema the editor can be generated using the "Generate Genny Application" entry in the export wizard.

The following dialog is shown in <<genny_export_dialog>>

.Create an application dialog
[[genny_export_dialog]]
image::images/genny_export.png[scaledwidth="50%"] 

The *Target Directory* leads to a directory where the generated code will be stored. 
The *Application ID* is a string similar to a package name. You should use a qualified domain to be sure your application plug-ins will have a unique id.
The *Name* of the application will be used as executable name.

After pressing *Finish* another dialog will open which shows a progress bar for the generation. If the bar is at 100% the close button will be enabled 
and the dialog can be closed. The binaries of the application can be found at {targetDir}/{applicationId}-application/target . Onotoa generated binaries for
win32, macosx and linux for 32 and 64 systems. 

NOTE: The application is build with Maven3. If you start the generator for the first time the building process will take some time because maven needs to
download all dependencies. After that there are stored in a local repository.  