== The Model View ==

The *Model View* is the core of Onotoa. It represents the schema, visualizing it as a tree. The state of the
schema is saved as attribute of the *Model View*. The diagram editors are just views on the model, or parts 
if only a few elements of the schema are visualized in a diagram. This makes it possible to create multiple diagrams
to realize different views of the same schema.


.Model View
[caption="Figure:"]
image::images/modelview.png[scaledwidth="60%"]

In the title bar of the *Model View* you'll see a button. This button can be used to start a validation of the current schema. 
Additionally the *Model View* has a menu, which can be opened by clicking on 
ifdef::basebackend-docbook[]
image:images/viewmenu_button.png[width="0.3cm"].
endif::basebackend-docbook[]
ifndef::basebackend-docbook[]
image:images/viewmenu_button.png[].
endif::basebackend-docbook[]
Right now the menu contains *Create New Diagram...* and *Validate*.

Every element in the tree is called a node. A node has a parent and may have children. For example the node 'Diagrams' is
used parent for node representing diagrams. These node are labelled with the name of the diagram. A description of the different 
nodes and their children follow. Every node has a context menu. To open it just click with the right mouse button on the node. 

If a node represents a schema element or a diagram, the properties of the element are shown in the *Property Details View* after selecting it.
To select a node, just click on the node with the left mouse button.

=== Managing diagrams ===

The node 'Diagrams' is the parent of all nodes representing diagrams. 

To create a new diagram, use the context menu of the 'Diagrams' node. It contains one entry,  'Create New Diagram...'. Choose this entry, 
by clicking with the left mouse button on it and a dialog appears and asks for the name of the new diagram.
If you want to abort, just press the 'Cancel' button. 

Every diagram must have a different name, so if you enter a name, which is already used, it is 
not possible to press 'OK'. After pressing 'OK' a new diagram is created and an editor is automatically opened. You can also recognize, that the 
node 'Diagrams' got a new child node labelled with the name of the diagram.

.Context menu of 'Diagrams' in the Model View
[caption="Figure:"]
image::images/create_diagram_ctx.png[scaledwidth="60%"]

The context menu of a diagram node has two entries:

* *Rename...* Opens a dialog to rename the diagram.
* *Delete* Deletes the diagram and it's content. 

NOTE: The deletion of the diagram does not delete the schema elements, which are represented in the diagram.

To reopen a closed *Diagram Editor* just double click on the node representing the diagram.

=== Managing the schema ===

A Topic Maps schema consists of topic types and their specializations and constraints, which are associated with each other.
The *Model View* groups the elements of the schema by the topic type. The main node of the Topic Maps schema is labelled as
'Topic Map Schema'. It represents the current schema. If you select it, the property page of the schema is shown in the
*Property Details View* which provide an input mask for the schema name and a base locator. For more information see
<<_topic_map_schema>>.

 
With the *Model View* it is possible to create almost every schema element, by using the context menu of the different nodes. 
The properties of new elements can be edited by selecting them and fill out their property page in the *PropertyDetails Views*.
The first a user should do is selecting the property page of the node 'Topic Map Schema'. Especially the property *base locator* is
getting handy while creating new topic types. Select the node 'Topic Map Schema' and enter the URL "http://onotoa.topicmapslab.de/example".
The base locator is used to create a subject identifier for any new topic type created. The identifier is build by using the base locator 
and appending the name. In this example, creating a topic type with the name "person" the subject identifier  "http://onotoa.topicmapslab.de/example/person" is
created automatically.  
 

After setting the base locator it's time to create some topic types. Mostly you only need to create the topic types of you schema. 
Although it is possible, it is not necessary to create name, association, occurrence or role types.
These specializations of topic type can be created on demand in the property pages.

To create a new topic type person, use the context menu of the node 'Topic Type'. Choose 'Create TopicType...' and a dialog opens to 
create a new topic type, like in  <<new_topic_type>>.

.New Topic Type Wizard
[[new_topic_type]]
image::images/new_tt_dialog.png[scaledwidth="100%"]

Right now _Onotoa_ only supports one name per Topic. When the topic is used to type a constraint, the name is visualized therefor _Onotoa_ 
forbids topics with the same name. If the schema has a base locator, which it should have right now, you'll realize, that the subject identifier
textfield is automatically filled with the URL created with the base locator.

Enter the name "Person" and you'll see the topic gets a subject identifier which is "http://onotoa.topicmapslab.de/example/person".
You may change the identifier by editing the subject identifier textfield. After modifying the subject identifier it won't be changed anymore when you
change the name. You may recognize while typing a popup window occurs, which show a list of proposals for you're subject identifier. You can navigate
through the list with the up and down keys. Select one by pressing Enter. The proposals are filtered by the text you already wrote. If you entered
"http://psi" only identifier starting with that text will be in the proposal list. 


.Create Person Topic Type with Proposal Popup
[[new_person_type]]
image::images/newperson_dialog.png[scaledwidth="100%"]

Their are different proposal provider installed in _Onotoa_:

* The first is the *Basic Provider*. This provider checks all used subject identifier in the topic map schema and proposes the prefixes of that
URLs. For instance if you already has a topic type with the subject identifier "http://example.org/topictype" the URL "http://example.org" is 
proposed.
* The *Subje3ct PSI Provider* uses the PSI platform http://www.subj3ct.com . This platform provides a psi repository, where you can get a set 
of subject identifiers after you entered a search string. _Onotoa_ uses the name of the topic type and asks for subject identifiers. So it is advised
to enter a name first before you enter the subject identifier.

NOTE: Sometimes the connection to the subj3ct server is to slow to get results before the timeout. Therefor it may happen that you get a shorter
proposal list before you restart the filtering by entering another letter in the subject identifier textfield. If you don't want to use the proposal provider
you can deactivate them in the preferences.

After the topic "Person" was created it is possible to add some constraints to the type. The context menu provides the following entries:

* *Rename...:* Opens a dialog to rename the topic type. This is an alternative to the name field in the property page of the topic type.

* *Delete:* Deletes the topic type. This removes all topic representations in all the diagrams of the schema, too.

* *Create Name Constraint:* Creates a new name constraint, using the default name-type, specified by the TMDM and the default cardinality
which is 0..* .

* *Create Occurrence Constraint:* Creates a new occurrence constraint, using tmdm:subject as type, specified by the TMCL standard and the default cardinality
which is 0..* .

* *Create Subject Identifier Constraint:* Creates a new subject identifier constraint, using the default cardinality which is 0..* and the default regular expression ".*".

* *Create Subject Locator Constraint:* Creates a new subject locator constraint, using the default cardinality which is 0..* and the default regular expression ".*".

After creating a constraint, you can expand the type node and the constraints of that type are shown as child nodes of the topic type node.
To edit the properties of a new created constraint, select it in the *Model View* and the property page of that constraint is opened
in the *Property Details View*.

