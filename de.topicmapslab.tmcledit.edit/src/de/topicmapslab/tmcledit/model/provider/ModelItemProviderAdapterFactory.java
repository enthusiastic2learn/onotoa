/**
 * (C) 2008 Hannes Niederhausen, Topic Maps Lab
 *
 * $Id$
 */
package de.topicmapslab.tmcledit.model.provider;

import de.topicmapslab.tmcledit.model.util.ModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.TopicType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopicTypeItemProvider topicTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.TopicType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopicTypeAdapter() {
		if (topicTypeItemProvider == null) {
			topicTypeItemProvider = new TopicTypeItemProvider(this);
		}

		return topicTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.OccurrenceTypeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OccurrenceTypeConstraintItemProvider occurrenceTypeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.OccurrenceTypeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOccurrenceTypeConstraintAdapter() {
		if (occurrenceTypeConstraintItemProvider == null) {
			occurrenceTypeConstraintItemProvider = new OccurrenceTypeConstraintItemProvider(this);
		}

		return occurrenceTypeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.NameTypeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTypeConstraintItemProvider nameTypeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.NameTypeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameTypeConstraintAdapter() {
		if (nameTypeConstraintItemProvider == null) {
			nameTypeConstraintItemProvider = new NameTypeConstraintItemProvider(this);
		}

		return nameTypeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.RolePlayerConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RolePlayerConstraintItemProvider rolePlayerConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.RolePlayerConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRolePlayerConstraintAdapter() {
		if (rolePlayerConstraintItemProvider == null) {
			rolePlayerConstraintItemProvider = new RolePlayerConstraintItemProvider(this);
		}

		return rolePlayerConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.TopicMapSchema} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopicMapSchemaItemProvider topicMapSchemaItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.TopicMapSchema}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopicMapSchemaAdapter() {
		if (topicMapSchemaItemProvider == null) {
			topicMapSchemaItemProvider = new TopicMapSchemaItemProvider(this);
		}

		return topicMapSchemaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.SubjectLocatorConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectLocatorConstraintItemProvider subjectLocatorConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.SubjectLocatorConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectLocatorConstraintAdapter() {
		if (subjectLocatorConstraintItemProvider == null) {
			subjectLocatorConstraintItemProvider = new SubjectLocatorConstraintItemProvider(this);
		}

		return subjectLocatorConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.SubjectIdentifierConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectIdentifierConstraintItemProvider subjectIdentifierConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.SubjectIdentifierConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectIdentifierConstraintAdapter() {
		if (subjectIdentifierConstraintItemProvider == null) {
			subjectIdentifierConstraintItemProvider = new SubjectIdentifierConstraintItemProvider(this);
		}

		return subjectIdentifierConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.AssociationTypeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationTypeConstraintItemProvider associationTypeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.AssociationTypeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationTypeConstraintAdapter() {
		if (associationTypeConstraintItemProvider == null) {
			associationTypeConstraintItemProvider = new AssociationTypeConstraintItemProvider(this);
		}

		return associationTypeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.MappingElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingElementItemProvider mappingElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.MappingElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingElementAdapter() {
		if (mappingElementItemProvider == null) {
			mappingElementItemProvider = new MappingElementItemProvider(this);
		}

		return mappingElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.TypeNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeNodeItemProvider typeNodeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.TypeNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeNodeAdapter() {
		if (typeNodeItemProvider == null) {
			typeNodeItemProvider = new TypeNodeItemProvider(this);
		}

		return typeNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.Bendpoints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BendpointsItemProvider bendpointsItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.Bendpoints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBendpointsAdapter() {
		if (bendpointsItemProvider == null) {
			bendpointsItemProvider = new BendpointsItemProvider(this);
		}

		return bendpointsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.Edge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeItemProvider edgeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.Edge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeAdapter() {
		if (edgeItemProvider == null) {
			edgeItemProvider = new EdgeItemProvider(this);
		}

		return edgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.AssociationNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationNodeItemProvider associationNodeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.AssociationNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationNodeAdapter() {
		if (associationNodeItemProvider == null) {
			associationNodeItemProvider = new AssociationNodeItemProvider(this);
		}

		return associationNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.Diagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramItemProvider diagramItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.Diagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramAdapter() {
		if (diagramItemProvider == null) {
			diagramItemProvider = new DiagramItemProvider(this);
		}

		return diagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.ScopeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeConstraintItemProvider scopeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.ScopeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeConstraintAdapter() {
		if (scopeConstraintItemProvider == null) {
			scopeConstraintItemProvider = new ScopeConstraintItemProvider(this);
		}

		return scopeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.LabelPos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelPosItemProvider labelPosItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.LabelPos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelPosAdapter() {
		if (labelPosItemProvider == null) {
			labelPosItemProvider = new LabelPosItemProvider(this);
		}

		return labelPosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.AssociationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationTypeItemProvider associationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.AssociationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationTypeAdapter() {
		if (associationTypeItemProvider == null) {
			associationTypeItemProvider = new AssociationTypeItemProvider(this);
		}

		return associationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.OccurrenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OccurrenceTypeItemProvider occurrenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.OccurrenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOccurrenceTypeAdapter() {
		if (occurrenceTypeItemProvider == null) {
			occurrenceTypeItemProvider = new OccurrenceTypeItemProvider(this);
		}

		return occurrenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.RoleConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleConstraintItemProvider roleConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.RoleConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleConstraintAdapter() {
		if (roleConstraintItemProvider == null) {
			roleConstraintItemProvider = new RoleConstraintItemProvider(this);
		}

		return roleConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.RoleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleTypeItemProvider roleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.RoleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleTypeAdapter() {
		if (roleTypeItemProvider == null) {
			roleTypeItemProvider = new RoleTypeItemProvider(this);
		}

		return roleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.OtherRolePlayerConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OtherRolePlayerConstraintItemProvider otherRolePlayerConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.OtherRolePlayerConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOtherRolePlayerConstraintAdapter() {
		if (otherRolePlayerConstraintItemProvider == null) {
			otherRolePlayerConstraintItemProvider = new OtherRolePlayerConstraintItemProvider(this);
		}

		return otherRolePlayerConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.NameType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTypeItemProvider nameTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.NameType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameTypeAdapter() {
		if (nameTypeItemProvider == null) {
			nameTypeItemProvider = new NameTypeItemProvider(this);
		}

		return nameTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.AbstractTypedCardinalityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractTypedCardinalityConstraintItemProvider abstractTypedCardinalityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.AbstractTypedCardinalityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractTypedCardinalityConstraintAdapter() {
		if (abstractTypedCardinalityConstraintItemProvider == null) {
			abstractTypedCardinalityConstraintItemProvider = new AbstractTypedCardinalityConstraintItemProvider(this);
		}

		return abstractTypedCardinalityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.Comment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentItemProvider commentItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.Comment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentAdapter() {
		if (commentItemProvider == null) {
			commentItemProvider = new CommentItemProvider(this);
		}

		return commentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.TMCLConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMCLConstructItemProvider tmclConstructItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.TMCLConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMCLConstructAdapter() {
		if (tmclConstructItemProvider == null) {
			tmclConstructItemProvider = new TMCLConstructItemProvider(this);
		}

		return tmclConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.ReifierConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifierConstraintItemProvider reifierConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.ReifierConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifierConstraintAdapter() {
		if (reifierConstraintItemProvider == null) {
			reifierConstraintItemProvider = new ReifierConstraintItemProvider(this);
		}

		return reifierConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.ReifiableTpoicType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifiableTpoicTypeItemProvider reifiableTpoicTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.ReifiableTpoicType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifiableTpoicTypeAdapter() {
		if (reifiableTpoicTypeItemProvider == null) {
			reifiableTpoicTypeItemProvider = new ReifiableTpoicTypeItemProvider(this);
		}

		return reifiableTpoicTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.topicmapslab.tmcledit.model.ScopedReifiableTopicType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopedReifiableTopicTypeItemProvider scopedReifiableTopicTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.topicmapslab.tmcledit.model.ScopedReifiableTopicType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopedReifiableTopicTypeAdapter() {
		if (scopedReifiableTopicTypeItemProvider == null) {
			scopedReifiableTopicTypeItemProvider = new ScopedReifiableTopicTypeItemProvider(this);
		}

		return scopedReifiableTopicTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (topicTypeItemProvider != null) topicTypeItemProvider.dispose();
		if (occurrenceTypeConstraintItemProvider != null) occurrenceTypeConstraintItemProvider.dispose();
		if (nameTypeConstraintItemProvider != null) nameTypeConstraintItemProvider.dispose();
		if (rolePlayerConstraintItemProvider != null) rolePlayerConstraintItemProvider.dispose();
		if (topicMapSchemaItemProvider != null) topicMapSchemaItemProvider.dispose();
		if (subjectLocatorConstraintItemProvider != null) subjectLocatorConstraintItemProvider.dispose();
		if (subjectIdentifierConstraintItemProvider != null) subjectIdentifierConstraintItemProvider.dispose();
		if (associationTypeConstraintItemProvider != null) associationTypeConstraintItemProvider.dispose();
		if (mappingElementItemProvider != null) mappingElementItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (typeNodeItemProvider != null) typeNodeItemProvider.dispose();
		if (bendpointsItemProvider != null) bendpointsItemProvider.dispose();
		if (edgeItemProvider != null) edgeItemProvider.dispose();
		if (associationNodeItemProvider != null) associationNodeItemProvider.dispose();
		if (diagramItemProvider != null) diagramItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (scopeConstraintItemProvider != null) scopeConstraintItemProvider.dispose();
		if (labelPosItemProvider != null) labelPosItemProvider.dispose();
		if (associationTypeItemProvider != null) associationTypeItemProvider.dispose();
		if (occurrenceTypeItemProvider != null) occurrenceTypeItemProvider.dispose();
		if (roleConstraintItemProvider != null) roleConstraintItemProvider.dispose();
		if (roleTypeItemProvider != null) roleTypeItemProvider.dispose();
		if (otherRolePlayerConstraintItemProvider != null) otherRolePlayerConstraintItemProvider.dispose();
		if (nameTypeItemProvider != null) nameTypeItemProvider.dispose();
		if (abstractTypedCardinalityConstraintItemProvider != null) abstractTypedCardinalityConstraintItemProvider.dispose();
		if (commentItemProvider != null) commentItemProvider.dispose();
		if (tmclConstructItemProvider != null) tmclConstructItemProvider.dispose();
		if (reifierConstraintItemProvider != null) reifierConstraintItemProvider.dispose();
		if (reifiableTpoicTypeItemProvider != null) reifiableTpoicTypeItemProvider.dispose();
		if (scopedReifiableTopicTypeItemProvider != null) scopedReifiableTopicTypeItemProvider.dispose();
	}

}
